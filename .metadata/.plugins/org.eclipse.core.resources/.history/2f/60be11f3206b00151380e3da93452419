/*
 * LinkedList.cpp
 *
 *  Created on: Oct 3, 2015
 *      Author: Tao
 */
#include <iostream>
#define NULL 0
using namespace std;


struct SingleNode{
	int Value;
	SingleNode * NextNode;

	SingleNode(){
		Value = 0;
		NextNode = NULL;
	}

};


class LinkedList{
public:
	int Length = 0;
	SingleNode *MasterNode;//it seems that I should define the master node as a pointer, then I don't have to initialize it
	                       // with a specific value. tried to initialize a struct pointer using MasterNode = new SingleNode;
	                       // but it seems wrong.
	LinkedList(){
		Length = 0;
		MasterNode = new SingleNode;
	}
	LinkedList(SingleNode *FirstNode){
		MasterNode = FirstNode;
		Length = 1;
		cout << MasterNode->Value << endl;
	} // the constructor LinkedList shouldn't be define as a void or any return type. I defined it as void initially and it
	// turns out this was wrong. I shoudn't define a constructor with any type.
	void LinkedListMehtods(){

	}
	void SearchLastNode(){
		;
	}
	void Append(SingleNode *ANewNode){

	}

	~LinkedList(){
		cout << "the linked list is eliminated."<< endl;
	}

};



int main(){

	SingleNode NodeA, NodeB, NodeC, NodeD;
	LinkedList *ListA, ListB;


	NodeA.Value = 0;
	NodeA.NextNode = &NodeB;
	NodeB.Value = 1;
	NodeB.NextNode = &NodeC;
	NodeC.Value = 2;
	NodeA.NextNode->NextNode->NextNode = &NodeD;
	NodeA.NextNode->NextNode->NextNode->Value = 3;

	cout <<"The value of Node A is :" << NodeA.Value << endl;
	cout <<" The value of the next node of node A is : %d" << NodeA.NextNode->Value <<endl;
	cout <<"the value of the next node of next node of the next node of node A is :"<< NodeA.NextNode->NextNode->NextNode->Value <<endl;
	cout <<"the value of node D is :" << NodeD.Value<< endl;

	ListA = new LinkedList();
	cout << "the master node value of ListA is " << ListA->MasterNode->Value << endl;
	ListB = *ListA;


	cout << "test"<< endl;
	cout << " this is really weird"<< endl;

	return 0;
}




